<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>random thoughts and snippet</description>
    <link>http://localhost:4000//</link>
    <atom:link href="http://localhost:4000//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 15 Dec 2016 12:57:14 -0500</pubDate>
    <lastBuildDate>Thu, 15 Dec 2016 12:57:14 -0500</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>The Internets Election</title>
        <description>&lt;p&gt;One re-occuring theme in modern history is man vs machine. The bronze age, the industrial revolution, mathematics the technological age etc. Every so often, man makes such breakthrough in learning that it’s almost beyond his capacity to fully understand the new world in which he lives.&lt;/p&gt;

&lt;p&gt;Usually this gap in understanding shows up in war. The Manhattan Project was a dream project for any ambitious physicist until they stepped back to really understand the scope of what they created. Suddenly the theoretical became real and everyone was forced to come to grips with the fact that man now had the means and methods to ending all life on earth.&lt;/p&gt;

&lt;p&gt;Fast forward to today.&lt;/p&gt;

&lt;p&gt;It’s been an interesting time to be in tech. This election cycle was…&lt;em&gt;interesting&lt;/em&gt;. I’m not going to get into politics, but rather the way news and data is being weaponized. I don’t think many people realize how big automation and bots really are. I know I didn’t until I worked in digital publishing and learned about programatic sales, automated bidding and the scope of user tracking. Think those posts in the comment section are from real people? It’s becoming increasingly likely they are automated or paid trolls. Shit, you can’t even get a concert ticket at face value anymore because an army of bots are beating you to the punch.&lt;/p&gt;

&lt;p&gt;I didn’t always care about privacy. I wasn’t doing anything illegal, what should i worry about? But the amount of information that is available is staggering. This information can work in subtle ways. Someone knows that you’re looking for a plane ticket, and probably also the days you really want to travel, they are probably charging you a premium for your ticket, see Vitaly Tsyvinski’s excellent travel app. Or alerting potential employers that you are pregnant, or have small kids and making a judgement on your ability to contribute to the company before you even have an interview, or that you may have health issues that you prefer to keep private. Soon, employers will have an insane amount of data about applicants. I can’t imagine the repercussions.&lt;/p&gt;

&lt;p&gt;This election cycle saw a record amount of buzz around fake news, foreign actors and email dumps. Not to mention connected devices taking down some of the most robust websites on the planet. It’s one thing when the internet explodes and gives us the crying Michael Jordan meme and occassional corporate email hack that spills all of Hollywoods gossip. But we may be moving past such rather innocent uses of its power, and I’m not even sure if there’s anything we can do to stop it.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Dec 2016 05:18:00 -0500</pubDate>
        <link>http://localhost:4000//2016/12/12/The-Internets-Election.html</link>
        <guid isPermaLink="true">http://localhost:4000//2016/12/12/The-Internets-Election.html</guid>
        
        
      </item>
    
      <item>
        <title>Scroll With Me</title>
        <description>&lt;p&gt;The other day I was looking for black friday steals and came across some janky scroll behavior. The page would stutter. I wasn’t sure if it was just my computer or not, so I asked my wife if she saw the same thing on her machine. She did. I opened an incognito window and disabled extensions. Still there. Hmm.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/rl_sg.gif&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I fired up dev tools and started to take a peak. Figuring out performance issues on animations and scroll events is difficult because so many unrelated things can be a cause and the scroll event fires a ton. My first thought was to go to the timeline and record the behavior while i scrolled. Which lead to this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/breakpoint.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A ton of scroll events, not shocking, but then looking at the call stack I realized how many scripts were listening to the scroll event.&lt;/p&gt;

&lt;p&gt;We have in house UI functionality and 3rd party partners all querying the DOM for data anytime a scroll event happens. This is expensive. In their defense, they did try to throttle their events, but no amount of throttling is going to make up for so many scripts listening to such an active event. I’ve been behind that gun and its hard to argue with business when you have to implement a less than ideal 3rd party widget. Pick your battles.&lt;/p&gt;

&lt;p&gt;The interesting part came when i drilled into a particularly active 3rd party script. It wasn’t even looking for scroll events, it was looking for &lt;strong&gt;ANY&lt;/strong&gt; event. Any time you moved the mouse, scrolled…sneezed it fired. Worse, it was being fired from within 2 closures, which means that nothing in these larger functions can be garbage collected since their environment needs to be reachable by any inner functions (and those closures contained a ton of methods and nested objects which also have to be maintained).&lt;/p&gt;

&lt;p&gt;The memory allocation timeline confirmed a massive buildup. I’m sure there may be a solid technical/business reason for this, but remember, my little adventure began because my page was hiccuping every time I tried to find product. This was a customer facing problem compromising the core functionality of a webpage.&lt;/p&gt;

&lt;p&gt;Clearly this script is doing analytics on how users interact with the page, but why track every little thing the user does? At some point I’d think there would be a law of diminishing returns with such a large data set. I get tracking clicks or even how far down a page a user scrolls, this has clear actionable business use.&lt;/p&gt;

&lt;p&gt;But hey, i’m just a curious developer poking around dev tools and those decisions are above my pay grade.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Nov 2016 05:18:00 -0500</pubDate>
        <link>http://localhost:4000//2016/11/28/Scroll-With-Me.html</link>
        <guid isPermaLink="true">http://localhost:4000//2016/11/28/Scroll-With-Me.html</guid>
        
        
      </item>
    
      <item>
        <title>The End Is Just The Beginning</title>
        <description>&lt;p&gt;I’m writing this shortly after a site redesign while somethings are fresh in my brain. Maybe i’ll come back and look at this one day when in the midsts of a similar task.  What did I learn? What is the one thing i can take away from this expereince that can help me grow as a developer and a team member?&lt;/p&gt;

&lt;p&gt;One thing I keep harping on is the end is just the beginning. We don’t know what we need when we build. Only the market does and they ultimately are the ones that validate all of the discussions we have in internal meetings and quick chats. We can think a feature is must have and obsess about it only to have the market return a collective, meh.&lt;/p&gt;

&lt;p&gt;Often design will give me a UI and I implement it and we go back and forth a few times to iron out some rough spots, but we do so with a static document as our source of truth. The document represents the authoritative end. The redesign is finished when we accurately satisfy the graphic hierarchy of the document as well as any business logic. Then users test things and you have to iterate…and pivot…and the cycle starts.&lt;/p&gt;

&lt;p&gt;This used to bother me, but I’ve come to realize that this is just the nature of the beast. It’s better to embrace it and have it work as a built in part of your design process. The pain comes when you spend so much time amongst yourselves trying to get things just right, to the point that your code suffers. What started as a square, was slowly given rounded corners, turned into a circle but now needs to support bezier curves.&lt;/p&gt;

&lt;p&gt;This is one of the problems with inheritance paradigms. It’s difficult to accurately model real taxonomies because taxonomies are really really difficult to reason about. So let’s stop. Realize we don’t have a clue. We have hunches and really good guesses but no one really knows. And because of that it’s best to understand that when given a goal its just the beginning, aim to make your code as extensible, unopinionated and malleable as possible. You’ll thank yourself.&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Nov 2016 05:18:00 -0500</pubDate>
        <link>http://localhost:4000//2016/11/08/The-End-Is-Just-The-Beginning.html</link>
        <guid isPermaLink="true">http://localhost:4000//2016/11/08/The-End-Is-Just-The-Beginning.html</guid>
        
        
      </item>
    
      <item>
        <title>Signal vs Noise</title>
        <description>&lt;p&gt;Yesterday I met a family friend for lunch who had just finished a coding bootcamp and wanted to connect. I think I got more out of that coffee than I was able to give back. It was interesting to put myself in the shoes of a beginner again.&lt;/p&gt;

&lt;p&gt;My coffee date wanted to know how do i keep up and what he should be learning next. I remember having that feeling of needing…no wanting…to know everything…now. I’m not sure if it’s age or becoming more comfortable in my abilities, and not feeling bad at saying what i don’t know, but i just felt sad. This guy felt he needed to know everything now in order to compete. He just graduated from a bootcamp. I get it, it’s hard to tell someone who just spent 12 weeks and however many thousands of dolllars in a competitive immersive program to be patient. That’s arrogant on my part.&lt;/p&gt;

&lt;p&gt;One of my favorite voices in development is the team at 37 signals, and Jason Fried talks about it in a post called, 
&lt;a href=&quot;https://signalvnoise.com/posts/3124-give-it-five-minutes&quot;&gt;Just Give It 5 Minutes&lt;/a&gt;. So often in meetings, meetups and casual conversations there is a tendency to prove your technical prowess by always having something smart to say, by rattling off all the newest things you’re playing with or contributing to. It’s cliche but time is the most valuable and precious thing we have and yet we treat it as an infinite resource. (Just spend all weekend reading up on algorithms!..as if thats a great use of time for 80% of devs)&lt;/p&gt;

&lt;p&gt;A few years ago I talked to a guy from a new fitness startup who mentioned that his company’s product was written in Angular 1. The Angular team already gave word that they were doing a rewrite. I casually asked him how they’d manage the transition but couldn’t really get an answer. Earlier this year I was at a meetup hosted by that same company and that same developer gave a talk about migrating their app from Angular to React. I’m not writing this to be an ass. No one can predict the future and you do the best you can today with the information you have today. Writing software is hard. I immediately thought of all the time invested and the duplication of effort, damn, again I felt sad.&lt;/p&gt;

&lt;p&gt;Let’s be honest. The time spent learning X means that you can’t learn Y or can’t meet Z who might be your future spouse, business partner, friend. It takes time for an idea or concept to really take hold in your mind. I’m always hesitant to present myself as the wise old fish, but my message to that new developer and to my younger self is to find calm in the chaos. Figure out what you want to create and then create it with whatever tools you have available right now (thanks Teddy Roosevelt). Focus on fewer, but bigger wins. Don’t reach for a new view layer just because ‘performance’ or it works great with ‘new thing from venerable startup’. Anything other than the task at hand is a distraction. Protecting your time will be the hardest thing you’ll have to do as a programmer and cruelly it’s a skill that takes time to develop.&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Oct 2016 06:18:00 -0400</pubDate>
        <link>http://localhost:4000//2016/10/09/Signal-vs-Noise.html</link>
        <guid isPermaLink="true">http://localhost:4000//2016/10/09/Signal-vs-Noise.html</guid>
        
        
      </item>
    
      <item>
        <title>Working with Data</title>
        <description>&lt;p&gt;Earlier in my career I was tasked with creating a UI widget that was powered by a 3rd party API. This was before the current craze of functional programming and underscore was just becoming a thing.&lt;/p&gt;

&lt;p&gt;I like to look back at old programming challenges to see/cringe at the code that i wrote and also to see how i might approach a task now, given what i know now.&lt;/p&gt;

&lt;p&gt;What did i learn? Imperitive programming is a bitch. The code was originally started by another developer and we were under a tight deadline to glue the existing code to a new UI, I didn’t want to completely rewrite it and uncover an untold amount of bugs or edge cases that the previous developer coded around. I also didn’t like the endless amount of if statements in the code. But how could i do better?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I learned&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Get familiar with the data. So often you are in a rush to get started and code, but you can remove a lot of cruft from your code by having a clear understanding of the task at hand. This is painfully deceptive, because how many times have you thought you understood only to realize later you made a false assumption? It’s really difficult to get a birds eye view without understanding the shape of the data you’ll be working with.&lt;/p&gt;

&lt;p&gt;Rarely do you have the opportunity to build from scratch. The more realistic case is that you are inheriting code from others or have to iterate on code that you wrote months or perhaps years ago. Resist the urge to rewrite, try to extend the existing code by creating new methods. This way you don’t risk breaking existing functionality.&lt;/p&gt;

&lt;p&gt;forms and buttons are a bitch. the more interactive a form the more use cases you have to support. validating data and use flows are unpredictable. while design loves throwing the words ‘easy’ and ‘simple’ around, it ultimately falls on you to implement it in a way that you and your team can debug and extend. no easy task. a form library can bring a ton of functionality out of the box and get your team productive rather than slowly learning the pitfalls of doing it yourself.&lt;/p&gt;

&lt;p&gt;as a small addendum, functional libraries like lodash make data manipulation easier to reason about. Currying functions can help reusability when we have code that performs the same task on different inputs. However doing it by hand often means you have to remember the details of 2 call sites. the place where you passed the first value and the final call site:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;javascript&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greetTheJetsons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hello &amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greetTheJetsons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Jetson&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;20 lines of code later, what type of parameter does hello take? imagine when its being passed in a complex JSON object with less than&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;semantic key names&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;*/&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;George&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Judy&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ElRoy&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Jane&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Thu, 12 May 2016 06:18:00 -0400</pubDate>
        <link>http://localhost:4000//2016/05/12/Working-With-Data.html</link>
        <guid isPermaLink="true">http://localhost:4000//2016/05/12/Working-With-Data.html</guid>
        
        
      </item>
    
      <item>
        <title>Thoughts on React</title>
        <description>&lt;p&gt;This project was a chance to intuitively explore React and React Router and get a better feel for how things fit together.&lt;/p&gt;

&lt;p&gt;The only way to really get to know a new technology is to get your hands dirty. Thats it. you can read tutorials until your eyes bleed or follow along as someone codes up a TODO app. Your brain will give you a false sense of understanding because all the connections have been made and are being clearly presented to you.&lt;/p&gt;

&lt;p&gt;It’s ok to look at documentation, but if you find yourself completely unable to solve basic problems in the new framework then its probably a good hint that you may not really know what you’re doing. I think intuition in a language/framework is what I look to gain.&lt;/p&gt;

&lt;p&gt;At my day job, we are mostly a static site, so jQuery is still my bread and butter, but I try to be knowledgeable about new technologies in the front end world, and between newsletters and meet ups, React is the new hotness in these streets.&lt;/p&gt;

&lt;p&gt;Takeaways&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Learning to think React was an interesting paradigm change from the world of jQuery. jQuery is imperative (do this, then do this, then check on this …) while React aims for declarative (big picture)programming. Whenever I came across a problem I’d often start hacking something together that Just Worked, but realized I was coding around the framework, rather than with the framework. Understand the big ideas of the tools/frameworks/libraries you use.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Getting started is easy, getting things done takes time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;React has a relatively small API of methods to remember. FB’s documentation is really good. You feel empowered. Then you step off the well worn path and try to build something a bit more complex and realize that there’s not a lot of guidance concerning how to structure your project when it comes to features that we take for granted in modern web development. You don’t need Redux off the bat, but if you see yourself wanting to use React in a professional setting you will. Further you’ll probably need to know React Router and an understanding of how Redux deals with async operations. It may take a while to really get these concepts down.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The long road to intuition.
I like building small projects that I can get excited about and break things. Those first wins are so important. When I first start learning a new framework I like to look at other peoples code and replicate features. The problem is react is still pretty new and things change quickly.&lt;/p&gt;

    &lt;p&gt;A few:&lt;/p&gt;

    &lt;p&gt;a.  createClass vs React.Component vs stateless functional component vs container components.
b   JSX, ES5, ES6 and ES7 (i’m looking at you object spread operator) syntax used in examples. While not hard to learn you will find documentation and examples that use all of them and it not knowing some core features of ES6 will make understanding React examples difficult. In addition there are some subtle differences in creating components between them that distract from the real matter which is learning React.
c.  babel and take your pick of various asset bundlers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ajax and Routing and Redux
While not a concern of a beginner, eventually you’re gonna have to understand Redux. The creator of redux advises not to reach for it until you need it, and you’ll know you need it when you need it, which is fine advice. (Though the pragmatist in me would love to hear stories about people who implemented Redux after getting into the thickets using basic state/props and how the process of transferring that logic to a store/reducers/action creators went.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is shockingly little idiomatic guidance about how to work with routers and redux. This article sums it up way better than i ever could: https://formidable.com/blog/2016/07/11/let-the-url-do-the-talking-part-1-the-pain-of-react-router-in-redux/
I’m also not sure how you validate route params (making sure its an integer, or only of x.length) so that a path like ‘products/123’ is valid but ‘products/foo’ defaults to your 404 page. The guys who made react-router are great and have done the community a solid with this work, but i wonder if maybe we are getting beyond the initial use case of react and trying to make it work in ways it was never considered to work in.&lt;/p&gt;

&lt;p&gt;I’m not saying that a library should do everything for me. I’m a developer and I like solving problems. But I want to know if I’m going about it “the right way”.  React makes such strong use of composition, dependency injection, immutability and declarative programming that I’m not sure if I’m going off the reservation by hacking something together that works while missing the forrest for the trees.&lt;/p&gt;

&lt;p&gt;And that brings me to my final point, the ecosystem is solidifying but still moving. I know React is being used in the wild, but I’d love to hear people’s thoughts on it building robust production products. I’m sure it can be done, but it requires a lot of decisions to be made, (Mobi, Alt, Redux, Flux, React-Router, React-Router-Redux, ReactTransitionGroup) and sometimes decisions can be overwhelming. As more people share pain points and wins i’m sure some common best practices will emerge and I’ll look back at this post with a chuckle.&lt;/p&gt;

&lt;p&gt;All in all it was fun to get lost in the woods and learn.&lt;/p&gt;

</description>
        <pubDate>Sun, 10 Nov 2013 05:18:00 -0500</pubDate>
        <link>http://localhost:4000//2013/11/10/React.html</link>
        <guid isPermaLink="true">http://localhost:4000//2013/11/10/React.html</guid>
        
        
      </item>
    
  </channel>
</rss>
